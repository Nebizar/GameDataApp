// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.DLCRepositoryImpl;
import pl.put.poznan.gamebase.structures.DLC;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.QDLC;

privileged aspect DLCRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DLCRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DLCRepositoryImpl.GAMES = "games";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DLCRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DLCRepositoryImpl.REL___DATE = "rel_date";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DLCRepositoryImpl.PRICE = "price";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DLCRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DLC> DLCRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDLC dLC = QDLC.dLC;
        
        JPQLQuery<DLC> query = from(dLC);
        
        Path<?>[] paths = new Path<?>[] {dLC.games,dLC.name,dLC.rel_date,dLC.price,dLC.description};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, dLC.games)
			.map(NAME, dLC.name)
			.map(REL___DATE, dLC.rel_date)
			.map(PRICE, dLC.price)
			.map(DESCRIPTION, dLC.description);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, dLC);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DLC> DLCRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDLC dLC = QDLC.dLC;
        
        JPQLQuery<DLC> query = from(dLC);
        
        Path<?>[] paths = new Path<?>[] {dLC.games,dLC.name,dLC.rel_date,dLC.price,dLC.description};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(dLC.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, dLC.games)
			.map(NAME, dLC.name)
			.map(REL___DATE, dLC.rel_date)
			.map(PRICE, dLC.price)
			.map(DESCRIPTION, dLC.description);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, dLC);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DLC> DLCRepositoryImpl.findByGames(Games games, GlobalSearch globalSearch, Pageable pageable) {
        
        QDLC dLC = QDLC.dLC;
        
        JPQLQuery<DLC> query = from(dLC);
        
        Assert.notNull(games, "games is required");
        
        query.where(dLC.games.eq(games));
        Path<?>[] paths = new Path<?>[] {dLC.games,dLC.name,dLC.rel_date,dLC.price,dLC.description};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, dLC.games)
			.map(NAME, dLC.name)
			.map(REL___DATE, dLC.rel_date)
			.map(PRICE, dLC.price)
			.map(DESCRIPTION, dLC.description);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, dLC);
    }
    
}
