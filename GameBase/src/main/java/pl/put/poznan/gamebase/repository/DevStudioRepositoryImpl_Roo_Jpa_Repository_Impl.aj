// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.DevStudioRepositoryImpl;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.Publishers;
import pl.put.poznan.gamebase.structures.QDevStudio;

privileged aspect DevStudioRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DevStudioRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevStudioRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevStudioRepositoryImpl.COUNTRY = "country";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevStudioRepositoryImpl.MAIN___LOC = "main_loc";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevStudioRepositoryImpl.DEVS___COUNT = "devs_count";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevStudioRepositoryImpl.VALUE_OF = "valueOf";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevStudioRepositoryImpl.PUBLISHERS = "publishers";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DevStudio> DevStudioRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDevStudio devStudio = QDevStudio.devStudio;
        
        JPQLQuery<DevStudio> query = from(devStudio);
        
        Path<?>[] paths = new Path<?>[] {devStudio.name,devStudio.country,devStudio.main_loc,devStudio.devs_count,devStudio.valueOf,devStudio.publishers};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, devStudio.name)
			.map(COUNTRY, devStudio.country)
			.map(MAIN___LOC, devStudio.main_loc)
			.map(DEVS___COUNT, devStudio.devs_count)
			.map(VALUE_OF, devStudio.valueOf)
			.map(PUBLISHERS, devStudio.publishers);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DevStudio> DevStudioRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDevStudio devStudio = QDevStudio.devStudio;
        
        JPQLQuery<DevStudio> query = from(devStudio);
        
        Path<?>[] paths = new Path<?>[] {devStudio.name,devStudio.country,devStudio.main_loc,devStudio.devs_count,devStudio.valueOf,devStudio.publishers};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(devStudio.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, devStudio.name)
			.map(COUNTRY, devStudio.country)
			.map(MAIN___LOC, devStudio.main_loc)
			.map(DEVS___COUNT, devStudio.devs_count)
			.map(VALUE_OF, devStudio.valueOf)
			.map(PUBLISHERS, devStudio.publishers);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DevStudio> DevStudioRepositoryImpl.findByPublishers(Publishers publishers, GlobalSearch globalSearch, Pageable pageable) {
        
        QDevStudio devStudio = QDevStudio.devStudio;
        
        JPQLQuery<DevStudio> query = from(devStudio);
        
        Assert.notNull(publishers, "publishers is required");
        
        query.where(devStudio.publishers.eq(publishers));
        Path<?>[] paths = new Path<?>[] {devStudio.name,devStudio.country,devStudio.main_loc,devStudio.devs_count,devStudio.valueOf,devStudio.publishers};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, devStudio.name)
			.map(COUNTRY, devStudio.country)
			.map(MAIN___LOC, devStudio.main_loc)
			.map(DEVS___COUNT, devStudio.devs_count)
			.map(VALUE_OF, devStudio.valueOf)
			.map(PUBLISHERS, devStudio.publishers);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, devStudio);
    }
    
}
