// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.DevelopersRepositoryImpl;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.Developers;
import pl.put.poznan.gamebase.structures.QDevelopers;

privileged aspect DevelopersRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: DevelopersRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevelopersRepositoryImpl.DEVSTUDIO = "devstudio";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevelopersRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevelopersRepositoryImpl.SURNAME = "surname";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevelopersRepositoryImpl.STATUS = "status";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DevelopersRepositoryImpl.SALARY = "salary";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Developers> DevelopersRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDevelopers developers = QDevelopers.developers;
        
        JPQLQuery<Developers> query = from(developers);
        
        Path<?>[] paths = new Path<?>[] {developers.devstudio,developers.name,developers.surname,developers.status,developers.salary};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DEVSTUDIO, developers.devstudio)
			.map(NAME, developers.name)
			.map(SURNAME, developers.surname)
			.map(STATUS, developers.status)
			.map(SALARY, developers.salary);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, developers);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Developers> DevelopersRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDevelopers developers = QDevelopers.developers;
        
        JPQLQuery<Developers> query = from(developers);
        
        Path<?>[] paths = new Path<?>[] {developers.devstudio,developers.name,developers.surname,developers.status,developers.salary};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(developers.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DEVSTUDIO, developers.devstudio)
			.map(NAME, developers.name)
			.map(SURNAME, developers.surname)
			.map(STATUS, developers.status)
			.map(SALARY, developers.salary);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, developers);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devstudio
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Developers> DevelopersRepositoryImpl.findByDevstudio(DevStudio devstudio, GlobalSearch globalSearch, Pageable pageable) {
        
        QDevelopers developers = QDevelopers.developers;
        
        JPQLQuery<Developers> query = from(developers);
        
        Assert.notNull(devstudio, "devstudio is required");
        
        query.where(developers.devstudio.eq(devstudio));
        Path<?>[] paths = new Path<?>[] {developers.devstudio,developers.name,developers.surname,developers.status,developers.salary};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DEVSTUDIO, developers.devstudio)
			.map(NAME, developers.name)
			.map(SURNAME, developers.surname)
			.map(STATUS, developers.status)
			.map(SALARY, developers.salary);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, developers);
    }
    
}
