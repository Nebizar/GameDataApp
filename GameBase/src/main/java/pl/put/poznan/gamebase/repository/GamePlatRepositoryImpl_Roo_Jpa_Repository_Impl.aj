// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.GamePlatRepositoryImpl;
import pl.put.poznan.gamebase.structures.GamePlat;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.Platform;
import pl.put.poznan.gamebase.structures.QGamePlat;

privileged aspect GamePlatRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: GamePlatRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamePlatRepositoryImpl.GAMES = "games";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamePlatRepositoryImpl.PRICE = "price";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamePlatRepositoryImpl.SALES = "sales";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamePlatRepositoryImpl.PLATFORM = "platform";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<GamePlat> GamePlatRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QGamePlat gamePlat = QGamePlat.gamePlat;
        
        JPQLQuery<GamePlat> query = from(gamePlat);
        
        Path<?>[] paths = new Path<?>[] {gamePlat.games,gamePlat.price,gamePlat.sales,gamePlat.platform};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, gamePlat.games)
			.map(PRICE, gamePlat.price)
			.map(SALES, gamePlat.sales)
			.map(PLATFORM, gamePlat.platform);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, gamePlat);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<GamePlat> GamePlatRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QGamePlat gamePlat = QGamePlat.gamePlat;
        
        JPQLQuery<GamePlat> query = from(gamePlat);
        
        Path<?>[] paths = new Path<?>[] {gamePlat.games,gamePlat.price,gamePlat.sales,gamePlat.platform};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(gamePlat.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, gamePlat.games)
			.map(PRICE, gamePlat.price)
			.map(SALES, gamePlat.sales)
			.map(PLATFORM, gamePlat.platform);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, gamePlat);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<GamePlat> GamePlatRepositoryImpl.findByGames(Games games, GlobalSearch globalSearch, Pageable pageable) {
        
        QGamePlat gamePlat = QGamePlat.gamePlat;
        
        JPQLQuery<GamePlat> query = from(gamePlat);
        
        Assert.notNull(games, "games is required");
        
        query.where(gamePlat.games.eq(games));
        Path<?>[] paths = new Path<?>[] {gamePlat.games,gamePlat.price,gamePlat.sales,gamePlat.platform};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, gamePlat.games)
			.map(PRICE, gamePlat.price)
			.map(SALES, gamePlat.sales)
			.map(PLATFORM, gamePlat.platform);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, gamePlat);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param platform
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<GamePlat> GamePlatRepositoryImpl.findByPlatform(Platform platform, GlobalSearch globalSearch, Pageable pageable) {
        
        QGamePlat gamePlat = QGamePlat.gamePlat;
        
        JPQLQuery<GamePlat> query = from(gamePlat);
        
        Assert.notNull(platform, "platform is required");
        
        query.where(gamePlat.platform.eq(platform));
        Path<?>[] paths = new Path<?>[] {gamePlat.games,gamePlat.price,gamePlat.sales,gamePlat.platform};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(GAMES, gamePlat.games)
			.map(PRICE, gamePlat.price)
			.map(SALES, gamePlat.sales)
			.map(PLATFORM, gamePlat.platform);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, gamePlat);
    }
    
}
