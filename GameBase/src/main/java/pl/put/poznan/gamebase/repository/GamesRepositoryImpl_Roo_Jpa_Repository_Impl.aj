// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.GamesRepositoryImpl;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.QGames;
import pl.put.poznan.gamebase.structures.Type;

privileged aspect GamesRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: GamesRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.DESCCRIPTION = "desccription";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.PEGI = "pegi";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.REL___DATE = "rel_date";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.BUDGET = "budget";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.TYPE = "type";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GamesRepositoryImpl.DEVSTUDIO = "devstudio";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QGames games = QGames.games;
        
        JPQLQuery<Games> query = from(games);
        
        Path<?>[] paths = new Path<?>[] {games.title,games.desccription,games.pegi,games.rel_date,games.budget,games.type,games.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, games.title)
			.map(DESCCRIPTION, games.desccription)
			.map(PEGI, games.pegi)
			.map(REL___DATE, games.rel_date)
			.map(BUDGET, games.budget)
			.map(TYPE, games.type)
			.map(DEVSTUDIO, games.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QGames games = QGames.games;
        
        JPQLQuery<Games> query = from(games);
        
        Path<?>[] paths = new Path<?>[] {games.title,games.desccription,games.pegi,games.rel_date,games.budget,games.type,games.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(games.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, games.title)
			.map(DESCCRIPTION, games.desccription)
			.map(PEGI, games.pegi)
			.map(REL___DATE, games.rel_date)
			.map(BUDGET, games.budget)
			.map(TYPE, games.type)
			.map(DEVSTUDIO, games.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devstudio
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesRepositoryImpl.findByDevstudio(DevStudio devstudio, GlobalSearch globalSearch, Pageable pageable) {
        
        QGames games = QGames.games;
        
        JPQLQuery<Games> query = from(games);
        
        Assert.notNull(devstudio, "devstudio is required");
        
        query.where(games.devstudio.eq(devstudio));
        Path<?>[] paths = new Path<?>[] {games.title,games.desccription,games.pegi,games.rel_date,games.budget,games.type,games.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, games.title)
			.map(DESCCRIPTION, games.desccription)
			.map(PEGI, games.pegi)
			.map(REL___DATE, games.rel_date)
			.map(BUDGET, games.budget)
			.map(TYPE, games.type)
			.map(DEVSTUDIO, games.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesRepositoryImpl.findByType(Type type, GlobalSearch globalSearch, Pageable pageable) {
        
        QGames games = QGames.games;
        
        JPQLQuery<Games> query = from(games);
        
        Assert.notNull(type, "type is required");
        
        query.where(games.type.eq(type));
        Path<?>[] paths = new Path<?>[] {games.title,games.desccription,games.pegi,games.rel_date,games.budget,games.type,games.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, games.title)
			.map(DESCCRIPTION, games.desccription)
			.map(PEGI, games.pegi)
			.map(REL___DATE, games.rel_date)
			.map(BUDGET, games.budget)
			.map(TYPE, games.type)
			.map(DEVSTUDIO, games.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, games);
    }
    
}
