// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import pl.put.poznan.gamebase.repository.PublishersRepositoryImpl;
import pl.put.poznan.gamebase.structures.Publishers;
import pl.put.poznan.gamebase.structures.QPublishers;

privileged aspect PublishersRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: PublishersRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PublishersRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PublishersRepositoryImpl.VALUE_OF = "valueOf";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PublishersRepositoryImpl.MAIN___LOC = "main_loc";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Publishers> PublishersRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QPublishers publishers = QPublishers.publishers;
        
        JPQLQuery<Publishers> query = from(publishers);
        
        Path<?>[] paths = new Path<?>[] {publishers.name,publishers.valueOf,publishers.main_loc};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, publishers.name)
			.map(VALUE_OF, publishers.valueOf)
			.map(MAIN___LOC, publishers.main_loc);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, publishers);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Publishers> PublishersRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QPublishers publishers = QPublishers.publishers;
        
        JPQLQuery<Publishers> query = from(publishers);
        
        Path<?>[] paths = new Path<?>[] {publishers.name,publishers.valueOf,publishers.main_loc};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(publishers.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, publishers.name)
			.map(VALUE_OF, publishers.valueOf)
			.map(MAIN___LOC, publishers.main_loc);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, publishers);
    }
    
}
