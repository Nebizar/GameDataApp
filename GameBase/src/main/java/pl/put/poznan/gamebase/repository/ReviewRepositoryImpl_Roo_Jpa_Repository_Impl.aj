// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.ReviewRepositoryImpl;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.QReview;
import pl.put.poznan.gamebase.structures.Review;
import pl.put.poznan.gamebase.structures.Reviewer;

privileged aspect ReviewRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ReviewRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.REVIEWER = "reviewer";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.USER___SCORE = "user_score";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.CRIT___SCORE = "crit_score";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.GAMEPLAY = "gameplay";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.GRAPHICS = "graphics";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.AUDIO = "audio";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewRepositoryImpl.GAMES = "games";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Review> ReviewRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QReview review = QReview.review;
        
        JPQLQuery<Review> query = from(review);
        
        Path<?>[] paths = new Path<?>[] {review.reviewer,review.user_score,review.crit_score,review.gameplay,review.graphics,review.audio,review.games};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(REVIEWER, review.reviewer)
			.map(USER___SCORE, review.user_score)
			.map(CRIT___SCORE, review.crit_score)
			.map(GAMEPLAY, review.gameplay)
			.map(GRAPHICS, review.graphics)
			.map(AUDIO, review.audio)
			.map(GAMES, review.games);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, review);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Review> ReviewRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QReview review = QReview.review;
        
        JPQLQuery<Review> query = from(review);
        
        Path<?>[] paths = new Path<?>[] {review.reviewer,review.user_score,review.crit_score,review.gameplay,review.graphics,review.audio,review.games};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(review.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(REVIEWER, review.reviewer)
			.map(USER___SCORE, review.user_score)
			.map(CRIT___SCORE, review.crit_score)
			.map(GAMEPLAY, review.gameplay)
			.map(GRAPHICS, review.graphics)
			.map(AUDIO, review.audio)
			.map(GAMES, review.games);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, review);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Review> ReviewRepositoryImpl.findByGames(Games games, GlobalSearch globalSearch, Pageable pageable) {
        
        QReview review = QReview.review;
        
        JPQLQuery<Review> query = from(review);
        
        Assert.notNull(games, "games is required");
        
        query.where(review.games.eq(games));
        Path<?>[] paths = new Path<?>[] {review.reviewer,review.user_score,review.crit_score,review.gameplay,review.graphics,review.audio,review.games};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(REVIEWER, review.reviewer)
			.map(USER___SCORE, review.user_score)
			.map(CRIT___SCORE, review.crit_score)
			.map(GAMEPLAY, review.gameplay)
			.map(GRAPHICS, review.graphics)
			.map(AUDIO, review.audio)
			.map(GAMES, review.games);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, review);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param reviewer
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Review> ReviewRepositoryImpl.findByReviewer(Reviewer reviewer, GlobalSearch globalSearch, Pageable pageable) {
        
        QReview review = QReview.review;
        
        JPQLQuery<Review> query = from(review);
        
        Assert.notNull(reviewer, "reviewer is required");
        
        query.where(review.reviewer.eq(reviewer));
        Path<?>[] paths = new Path<?>[] {review.reviewer,review.user_score,review.crit_score,review.gameplay,review.graphics,review.audio,review.games};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(REVIEWER, review.reviewer)
			.map(USER___SCORE, review.user_score)
			.map(CRIT___SCORE, review.crit_score)
			.map(GAMEPLAY, review.gameplay)
			.map(GRAPHICS, review.graphics)
			.map(AUDIO, review.audio)
			.map(GAMES, review.games);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, review);
    }
    
}
