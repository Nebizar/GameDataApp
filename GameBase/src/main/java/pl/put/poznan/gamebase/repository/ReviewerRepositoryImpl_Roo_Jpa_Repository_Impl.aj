// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import pl.put.poznan.gamebase.repository.ReviewerRepositoryImpl;
import pl.put.poznan.gamebase.structures.QReviewer;
import pl.put.poznan.gamebase.structures.Reviewer;

privileged aspect ReviewerRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ReviewerRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewerRepositoryImpl.NICK = "nick";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewerRepositoryImpl.CRITIC = "critic";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReviewerRepositoryImpl.AFFILITY = "affility";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reviewer> ReviewerRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QReviewer reviewer = QReviewer.reviewer;
        
        JPQLQuery<Reviewer> query = from(reviewer);
        
        Path<?>[] paths = new Path<?>[] {reviewer.nick,reviewer.critic,reviewer.affility};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NICK, reviewer.nick)
			.map(CRITIC, reviewer.critic)
			.map(AFFILITY, reviewer.affility);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, reviewer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reviewer> ReviewerRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QReviewer reviewer = QReviewer.reviewer;
        
        JPQLQuery<Reviewer> query = from(reviewer);
        
        Path<?>[] paths = new Path<?>[] {reviewer.nick,reviewer.critic,reviewer.affility};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(reviewer.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NICK, reviewer.nick)
			.map(CRITIC, reviewer.critic)
			.map(AFFILITY, reviewer.affility);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, reviewer);
    }
    
}
