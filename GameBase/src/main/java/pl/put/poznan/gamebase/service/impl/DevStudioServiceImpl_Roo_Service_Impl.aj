// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.service.impl;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import pl.put.poznan.gamebase.repository.DevStudioRepository;
import pl.put.poznan.gamebase.service.api.DevelopersService;
import pl.put.poznan.gamebase.service.api.GamesService;
import pl.put.poznan.gamebase.service.impl.DevStudioServiceImpl;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.Developers;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.Publishers;

privileged aspect DevStudioServiceImpl_Roo_Service_Impl {
    
    declare @type: DevStudioServiceImpl: @Service;
    
    declare @type: DevStudioServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DevStudioRepository DevStudioServiceImpl.devStudioRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DevelopersService DevStudioServiceImpl.developersService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private GamesService DevStudioServiceImpl.gamesService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param devStudioRepository
     * @param developersService
     * @param gamesService
     */
    @Autowired
    public DevStudioServiceImpl.new(DevStudioRepository devStudioRepository, @Lazy DevelopersService developersService, @Lazy GamesService gamesService) {
        setDevStudioRepository(devStudioRepository);
        setDevelopersService(developersService);
        setGamesService(gamesService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return DevStudioRepository
     */
    public DevStudioRepository DevStudioServiceImpl.getDevStudioRepository() {
        return devStudioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudioRepository
     */
    public void DevStudioServiceImpl.setDevStudioRepository(DevStudioRepository devStudioRepository) {
        this.devStudioRepository = devStudioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return DevelopersService
     */
    public DevelopersService DevStudioServiceImpl.getDevelopersService() {
        return developersService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param developersService
     */
    public void DevStudioServiceImpl.setDevelopersService(DevelopersService developersService) {
        this.developersService = developersService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return GamesService
     */
    public GamesService DevStudioServiceImpl.getGamesService() {
        return gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gamesService
     */
    public void DevStudioServiceImpl.setGamesService(GamesService gamesService) {
        this.gamesService = gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devstudio
     * @return Map
     */
    public Map<String, List<MessageI18n>> DevStudioServiceImpl.validate(DevStudio devstudio) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     * @param developersToAdd
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.addToDevelopers(DevStudio devStudio, Iterable<Long> developersToAdd) {
        List<Developers> developers = getDevelopersService().findAll(developersToAdd);
        devStudio.addToDevelopers(developers);
        return getDevStudioRepository().save(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     * @param gamesToAdd
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.addToGames(DevStudio devStudio, Iterable<Long> gamesToAdd) {
        List<Games> games = getGamesService().findAll(gamesToAdd);
        devStudio.addToGames(games);
        return getDevStudioRepository().save(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     * @param developersToRemove
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.removeFromDevelopers(DevStudio devStudio, Iterable<Long> developersToRemove) {
        List<Developers> developers = getDevelopersService().findAll(developersToRemove);
        devStudio.removeFromDevelopers(developers);
        return getDevStudioRepository().save(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     * @param gamesToRemove
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.removeFromGames(DevStudio devStudio, Iterable<Long> gamesToRemove) {
        List<Games> games = getGamesService().findAll(gamesToRemove);
        devStudio.removeFromGames(games);
        return getDevStudioRepository().save(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     * @param developers
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.setDevelopers(DevStudio devStudio, Iterable<Long> developers) {
        List<Developers> items = getDevelopersService().findAll(developers);
        Set<Developers> currents = devStudio.getDevelopers();
        Set<Developers> toRemove = new HashSet<Developers>();
        for (Iterator<Developers> iterator = currents.iterator(); iterator.hasNext();) {
            Developers nextDevelopers = iterator.next();
            if (items.contains(nextDevelopers)) {
                items.remove(nextDevelopers);
            } else {
                toRemove.add(nextDevelopers);
            }
        }
        devStudio.removeFromDevelopers(toRemove);
        devStudio.addToDevelopers(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        devStudio.setVersion(devStudio.getVersion() + 1);
        return getDevStudioRepository().save(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     * @param games
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.setGames(DevStudio devStudio, Iterable<Long> games) {
        List<Games> items = getGamesService().findAll(games);
        Set<Games> currents = devStudio.getGames();
        Set<Games> toRemove = new HashSet<Games>();
        for (Iterator<Games> iterator = currents.iterator(); iterator.hasNext();) {
            Games nextGames = iterator.next();
            if (items.contains(nextGames)) {
                items.remove(nextGames);
            } else {
                toRemove.add(nextGames);
            }
        }
        devStudio.removeFromGames(toRemove);
        devStudio.addToGames(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        devStudio.setVersion(devStudio.getVersion() + 1);
        return getDevStudioRepository().save(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudio
     */
    @Transactional
    public void DevStudioServiceImpl.delete(DevStudio devStudio) {
        // Clear bidirectional many-to-one child relationship with Publishers
        if (devStudio.getPublishers() != null) {
            devStudio.getPublishers().getDev_studios().remove(devStudio);
        }
        
        // Clear bidirectional one-to-many parent relationship with Developers
        for (Developers item : devStudio.getDevelopers()) {
            item.setDevstudio(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Games
        for (Games item : devStudio.getGames()) {
            item.setDevstudio(null);
        }
        
        getDevStudioRepository().delete(devStudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<DevStudio> DevStudioServiceImpl.save(Iterable<DevStudio> entities) {
        return getDevStudioRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void DevStudioServiceImpl.delete(Iterable<Long> ids) {
        List<DevStudio> toDelete = getDevStudioRepository().findAll(ids);
        getDevStudioRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return DevStudio
     */
    @Transactional
    public DevStudio DevStudioServiceImpl.save(DevStudio entity) {
        return getDevStudioRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return DevStudio
     */
    public DevStudio DevStudioServiceImpl.findOne(Long id) {
        return getDevStudioRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return DevStudio
     */
    public DevStudio DevStudioServiceImpl.findOneForUpdate(Long id) {
        return getDevStudioRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<DevStudio> DevStudioServiceImpl.findAll(Iterable<Long> ids) {
        return getDevStudioRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<DevStudio> DevStudioServiceImpl.findAll() {
        return getDevStudioRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long DevStudioServiceImpl.count() {
        return getDevStudioRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DevStudio> DevStudioServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getDevStudioRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DevStudio> DevStudioServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getDevStudioRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DevStudio> DevStudioServiceImpl.findByPublishers(Publishers publishers, GlobalSearch globalSearch, Pageable pageable) {
        return getDevStudioRepository().findByPublishers(publishers, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @return Long
     */
    public long DevStudioServiceImpl.countByPublishers(Publishers publishers) {
        return getDevStudioRepository().countByPublishers(publishers);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<DevStudio> DevStudioServiceImpl.getEntityType() {
        return DevStudio.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> DevStudioServiceImpl.getIdType() {
        return Long.class;
    }
    
}
