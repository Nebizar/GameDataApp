// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.service.impl;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import pl.put.poznan.gamebase.repository.GamesRepository;
import pl.put.poznan.gamebase.service.api.DLCService;
import pl.put.poznan.gamebase.service.api.GamePlatService;
import pl.put.poznan.gamebase.service.api.ReviewService;
import pl.put.poznan.gamebase.service.impl.GamesServiceImpl;
import pl.put.poznan.gamebase.structures.DLC;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.GamePlat;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.Review;
import pl.put.poznan.gamebase.structures.Type;

privileged aspect GamesServiceImpl_Roo_Service_Impl {
    
    declare @type: GamesServiceImpl: @Service;
    
    declare @type: GamesServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private GamesRepository GamesServiceImpl.gamesRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DLCService GamesServiceImpl.dLCService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private GamePlatService GamesServiceImpl.gamePlatService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ReviewService GamesServiceImpl.reviewService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param gamesRepository
     * @param dLCService
     * @param gamePlatService
     * @param reviewService
     */
    @Autowired
    public GamesServiceImpl.new(GamesRepository gamesRepository, @Lazy DLCService dLCService, @Lazy GamePlatService gamePlatService, @Lazy ReviewService reviewService) {
        setGamesRepository(gamesRepository);
        setDLCService(dLCService);
        setGamePlatService(gamePlatService);
        setReviewService(reviewService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return GamesRepository
     */
    public GamesRepository GamesServiceImpl.getGamesRepository() {
        return gamesRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gamesRepository
     */
    public void GamesServiceImpl.setGamesRepository(GamesRepository gamesRepository) {
        this.gamesRepository = gamesRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return DLCService
     */
    public DLCService GamesServiceImpl.getDLCService() {
        return dLCService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dLCService
     */
    public void GamesServiceImpl.setDLCService(DLCService dLCService) {
        this.dLCService = dLCService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return GamePlatService
     */
    public GamePlatService GamesServiceImpl.getGamePlatService() {
        return gamePlatService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gamePlatService
     */
    public void GamesServiceImpl.setGamePlatService(GamePlatService gamePlatService) {
        this.gamePlatService = gamePlatService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ReviewService
     */
    public ReviewService GamesServiceImpl.getReviewService() {
        return reviewService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param reviewService
     */
    public void GamesServiceImpl.setReviewService(ReviewService reviewService) {
        this.reviewService = reviewService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @return Map
     */
    public Map<String, List<MessageI18n>> GamesServiceImpl.validate(Games games) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param dlcsToAdd
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.addToDlcs(Games games, Iterable<Long> dlcsToAdd) {
        List<DLC> dlcs = getDLCService().findAll(dlcsToAdd);
        games.addToDlcs(dlcs);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param platformsToAdd
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.addToPlatforms(Games games, Iterable<Long> platformsToAdd) {
        List<GamePlat> platforms = getGamePlatService().findAll(platformsToAdd);
        games.addToPlatforms(platforms);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param reviewsToAdd
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.addToReviews(Games games, Iterable<Long> reviewsToAdd) {
        List<Review> reviews = getReviewService().findAll(reviewsToAdd);
        games.addToReviews(reviews);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param dlcsToRemove
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.removeFromDlcs(Games games, Iterable<Long> dlcsToRemove) {
        List<DLC> dlcs = getDLCService().findAll(dlcsToRemove);
        games.removeFromDlcs(dlcs);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param platformsToRemove
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.removeFromPlatforms(Games games, Iterable<Long> platformsToRemove) {
        List<GamePlat> platforms = getGamePlatService().findAll(platformsToRemove);
        games.removeFromPlatforms(platforms);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param reviewsToRemove
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.removeFromReviews(Games games, Iterable<Long> reviewsToRemove) {
        List<Review> reviews = getReviewService().findAll(reviewsToRemove);
        games.removeFromReviews(reviews);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param dlcs
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.setDlcs(Games games, Iterable<Long> dlcs) {
        List<DLC> items = getDLCService().findAll(dlcs);
        Set<DLC> currents = games.getDlcs();
        Set<DLC> toRemove = new HashSet<DLC>();
        for (Iterator<DLC> iterator = currents.iterator(); iterator.hasNext();) {
            DLC nextDLC = iterator.next();
            if (items.contains(nextDLC)) {
                items.remove(nextDLC);
            } else {
                toRemove.add(nextDLC);
            }
        }
        games.removeFromDlcs(toRemove);
        games.addToDlcs(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        games.setVersion(games.getVersion() + 1);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param platforms
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.setPlatforms(Games games, Iterable<Long> platforms) {
        List<GamePlat> items = getGamePlatService().findAll(platforms);
        Set<GamePlat> currents = games.getPlatforms();
        Set<GamePlat> toRemove = new HashSet<GamePlat>();
        for (Iterator<GamePlat> iterator = currents.iterator(); iterator.hasNext();) {
            GamePlat nextGamePlat = iterator.next();
            if (items.contains(nextGamePlat)) {
                items.remove(nextGamePlat);
            } else {
                toRemove.add(nextGamePlat);
            }
        }
        games.removeFromPlatforms(toRemove);
        games.addToPlatforms(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        games.setVersion(games.getVersion() + 1);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param reviews
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.setReviews(Games games, Iterable<Long> reviews) {
        List<Review> items = getReviewService().findAll(reviews);
        Set<Review> currents = games.getReviews();
        Set<Review> toRemove = new HashSet<Review>();
        for (Iterator<Review> iterator = currents.iterator(); iterator.hasNext();) {
            Review nextReview = iterator.next();
            if (items.contains(nextReview)) {
                items.remove(nextReview);
            } else {
                toRemove.add(nextReview);
            }
        }
        games.removeFromReviews(toRemove);
        games.addToReviews(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        games.setVersion(games.getVersion() + 1);
        return getGamesRepository().save(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     */
    @Transactional
    public void GamesServiceImpl.delete(Games games) {
        // Clear bidirectional many-to-one child relationship with DevStudio
        if (games.getDevstudio() != null) {
            games.getDevstudio().getGames().remove(games);
        }
        
        // Clear bidirectional many-to-one child relationship with Type
        if (games.getType() != null) {
            games.getType().getGames().remove(games);
        }
        
        // Clear bidirectional one-to-many parent relationship with DLC
        for (DLC item : games.getDlcs()) {
            item.setGames(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with GamePlat
        for (GamePlat item : games.getPlatforms()) {
            item.setGames(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Review
        for (Review item : games.getReviews()) {
            item.setGames(null);
        }
        
        getGamesRepository().delete(games);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Games> GamesServiceImpl.save(Iterable<Games> entities) {
        return getGamesRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void GamesServiceImpl.delete(Iterable<Long> ids) {
        List<Games> toDelete = getGamesRepository().findAll(ids);
        getGamesRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Games
     */
    @Transactional
    public Games GamesServiceImpl.save(Games entity) {
        return getGamesRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Games
     */
    public Games GamesServiceImpl.findOne(Long id) {
        return getGamesRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Games
     */
    public Games GamesServiceImpl.findOneForUpdate(Long id) {
        return getGamesRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Games> GamesServiceImpl.findAll(Iterable<Long> ids) {
        return getGamesRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Games> GamesServiceImpl.findAll() {
        return getGamesRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long GamesServiceImpl.count() {
        return getGamesRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getGamesRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getGamesRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devstudio
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesServiceImpl.findByDevstudio(DevStudio devstudio, GlobalSearch globalSearch, Pageable pageable) {
        return getGamesRepository().findByDevstudio(devstudio, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Games> GamesServiceImpl.findByType(Type type, GlobalSearch globalSearch, Pageable pageable) {
        return getGamesRepository().findByType(type, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devstudio
     * @return Long
     */
    public long GamesServiceImpl.countByDevstudio(DevStudio devstudio) {
        return getGamesRepository().countByDevstudio(devstudio);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @return Long
     */
    public long GamesServiceImpl.countByType(Type type) {
        return getGamesRepository().countByType(type);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Games> GamesServiceImpl.getEntityType() {
        return Games.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> GamesServiceImpl.getIdType() {
        return Long.class;
    }
    
}
