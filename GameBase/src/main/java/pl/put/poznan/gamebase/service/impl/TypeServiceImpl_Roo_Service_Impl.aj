// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.service.impl;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import pl.put.poznan.gamebase.repository.TypeRepository;
import pl.put.poznan.gamebase.service.api.GamesService;
import pl.put.poznan.gamebase.service.impl.TypeServiceImpl;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.Type;

privileged aspect TypeServiceImpl_Roo_Service_Impl {
    
    declare @type: TypeServiceImpl: @Service;
    
    declare @type: TypeServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TypeRepository TypeServiceImpl.typeRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private GamesService TypeServiceImpl.gamesService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param typeRepository
     * @param gamesService
     */
    @Autowired
    public TypeServiceImpl.new(TypeRepository typeRepository, @Lazy GamesService gamesService) {
        setTypeRepository(typeRepository);
        setGamesService(gamesService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return TypeRepository
     */
    public TypeRepository TypeServiceImpl.getTypeRepository() {
        return typeRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param typeRepository
     */
    public void TypeServiceImpl.setTypeRepository(TypeRepository typeRepository) {
        this.typeRepository = typeRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return GamesService
     */
    public GamesService TypeServiceImpl.getGamesService() {
        return gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gamesService
     */
    public void TypeServiceImpl.setGamesService(GamesService gamesService) {
        this.gamesService = gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @return Map
     */
    public Map<String, List<MessageI18n>> TypeServiceImpl.validate(Type type) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param gamesToAdd
     * @return Type
     */
    @Transactional
    public Type TypeServiceImpl.addToGames(Type type, Iterable<Long> gamesToAdd) {
        List<Games> games = getGamesService().findAll(gamesToAdd);
        type.addToGames(games);
        return getTypeRepository().save(type);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param gamesToRemove
     * @return Type
     */
    @Transactional
    public Type TypeServiceImpl.removeFromGames(Type type, Iterable<Long> gamesToRemove) {
        List<Games> games = getGamesService().findAll(gamesToRemove);
        type.removeFromGames(games);
        return getTypeRepository().save(type);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param games
     * @return Type
     */
    @Transactional
    public Type TypeServiceImpl.setGames(Type type, Iterable<Long> games) {
        List<Games> items = getGamesService().findAll(games);
        Set<Games> currents = type.getGames();
        Set<Games> toRemove = new HashSet<Games>();
        for (Iterator<Games> iterator = currents.iterator(); iterator.hasNext();) {
            Games nextGames = iterator.next();
            if (items.contains(nextGames)) {
                items.remove(nextGames);
            } else {
                toRemove.add(nextGames);
            }
        }
        type.removeFromGames(toRemove);
        type.addToGames(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        type.setVersion(type.getVersion() + 1);
        return getTypeRepository().save(type);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     */
    @Transactional
    public void TypeServiceImpl.delete(Type type) {
        // Clear bidirectional one-to-many parent relationship with Games
        for (Games item : type.getGames()) {
            item.setType(null);
        }
        
        getTypeRepository().delete(type);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Type> TypeServiceImpl.save(Iterable<Type> entities) {
        return getTypeRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void TypeServiceImpl.delete(Iterable<Long> ids) {
        List<Type> toDelete = getTypeRepository().findAll(ids);
        getTypeRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Type
     */
    @Transactional
    public Type TypeServiceImpl.save(Type entity) {
        return getTypeRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Type
     */
    public Type TypeServiceImpl.findOne(Long id) {
        return getTypeRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Type
     */
    public Type TypeServiceImpl.findOneForUpdate(Long id) {
        return getTypeRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Type> TypeServiceImpl.findAll(Iterable<Long> ids) {
        return getTypeRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Type> TypeServiceImpl.findAll() {
        return getTypeRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long TypeServiceImpl.count() {
        return getTypeRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Type> TypeServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getTypeRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Type> TypeServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getTypeRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Type> TypeServiceImpl.getEntityType() {
        return Type.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> TypeServiceImpl.getIdType() {
        return Long.class;
    }
    
}
