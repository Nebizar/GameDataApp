// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import pl.put.poznan.gamebase.service.api.DLCService;
import pl.put.poznan.gamebase.service.api.GamesService;
import pl.put.poznan.gamebase.structures.DLC;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.web.GamesesCollectionThymeleafController;
import pl.put.poznan.gamebase.web.GamesesCollectionThymeleafLinkFactory;
import pl.put.poznan.gamebase.web.GamesesItemDlcsThymeleafController;

privileged aspect GamesesItemDlcsThymeleafController_Roo_Thymeleaf {
    
    declare @type: GamesesItemDlcsThymeleafController: @Controller;
    
    declare @type: GamesesItemDlcsThymeleafController: @RequestMapping(value = "/gameses/{games}/dlcs", name = "GamesesItemDlcsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private GamesService GamesesItemDlcsThymeleafController.gamesService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DLCService GamesesItemDlcsThymeleafController.dLCService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource GamesesItemDlcsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<GamesesCollectionThymeleafController> GamesesItemDlcsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService GamesesItemDlcsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param gamesService
     * @param dLCService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public GamesesItemDlcsThymeleafController.new(GamesService gamesService, DLCService dLCService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setGamesService(gamesService);
        setDLCService(dLCService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(GamesesCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return GamesService
     */
    public GamesService GamesesItemDlcsThymeleafController.getGamesService() {
        return gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gamesService
     */
    public void GamesesItemDlcsThymeleafController.setGamesService(GamesService gamesService) {
        this.gamesService = gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return DLCService
     */
    public DLCService GamesesItemDlcsThymeleafController.getDLCService() {
        return dLCService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param dLCService
     */
    public void GamesesItemDlcsThymeleafController.setDLCService(DLCService dLCService) {
        this.dLCService = dLCService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource GamesesItemDlcsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void GamesesItemDlcsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<GamesesCollectionThymeleafController> GamesesItemDlcsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void GamesesItemDlcsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<GamesesCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService GamesesItemDlcsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void GamesesItemDlcsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Games
     */
    @ModelAttribute
    public Games GamesesItemDlcsThymeleafController.getGames(@PathVariable("games") Long id, Locale locale, HttpMethod method) {
        Games games = null;
        if (HttpMethod.PUT.equals(method)) {
            games = gamesService.findOneForUpdate(id);
        } else {
            games = gamesService.findOne(id);
        }
        
        if (games == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Games", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return games;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void GamesesItemDlcsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("rel_date_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void GamesesItemDlcsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<DLC>> GamesesItemDlcsThymeleafController.datatables(@ModelAttribute Games games, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<DLC> dlcs = getDLCService().findByGames(games, search, pageable);
        long totalDlcsCount = getDLCService().countByGames(games);
        ConvertedDatatablesData<DLC> data =  new ConvertedDatatablesData<DLC>(dlcs, totalDlcsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<DLC>> GamesesItemDlcsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<DLC> dlcs = getDLCService().findAllByIdsIn(ids, search, pageable);
        long totalDlcsCount = dlcs.getTotalElements();
        ConvertedDatatablesData<DLC> data =  new ConvertedDatatablesData<DLC>(dlcs, totalDlcsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView GamesesItemDlcsThymeleafController.createForm(@ModelAttribute Games games, Model model) {
        populateForm(model);
        model.addAttribute("dLC", new DLC());
        return new ModelAndView("gameses/dlcs/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param dlcsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromDlcs", value = "/{dlcsToRemove}")
    @ResponseBody
    public ResponseEntity<?> GamesesItemDlcsThymeleafController.removeFromDlcs(@ModelAttribute Games games, @PathVariable("dlcsToRemove") Long dlcsToRemove) {
        getGamesService().removeFromDlcs(games,Collections.singleton(dlcsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param dlcsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromDlcsBatch", value = "/batch/{dlcsToRemove}")
    @ResponseBody
    public ResponseEntity<?> GamesesItemDlcsThymeleafController.removeFromDlcsBatch(@ModelAttribute Games games, @PathVariable("dlcsToRemove") Collection<Long> dlcsToRemove) {
        getGamesService().removeFromDlcs(games, dlcsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param games
     * @param dlcs
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView GamesesItemDlcsThymeleafController.create(@ModelAttribute Games games, @RequestParam(value = "dlcsIds", required = false) List<Long> dlcs, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (dlcs != null) {
            for (Iterator<Long> iterator = dlcs.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, games.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (dlcs != null) {
                games.setDlcs(new HashSet<DLC>(getDLCService().findAll(dlcs)));
            }else{
                games.setDlcs(new HashSet<DLC>());
            }
            // Reset the version to prevent update
             games.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("games", games);
            model.addAttribute("concurrency", true);
            return new ModelAndView("gameses/dlcs/create");
        }else if(!Objects.equals(version, games.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("games", games);
            model.addAttribute("concurrency", false);
            return new ModelAndView("gameses/dlcs/create");
        }
        getGamesService().setDlcs(games,dlcs);
        return new ModelAndView("redirect:" + getCollectionLink().to(GamesesCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
