// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import pl.put.poznan.gamebase.service.api.DevStudioService;
import pl.put.poznan.gamebase.service.api.PublishersService;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.Publishers;
import pl.put.poznan.gamebase.web.PublisherssCollectionThymeleafController;
import pl.put.poznan.gamebase.web.PublisherssCollectionThymeleafLinkFactory;
import pl.put.poznan.gamebase.web.PublisherssItemDev_studiosThymeleafController;

privileged aspect PublisherssItemDev_studiosThymeleafController_Roo_Thymeleaf {
    
    declare @type: PublisherssItemDev_studiosThymeleafController: @Controller;
    
    declare @type: PublisherssItemDev_studiosThymeleafController: @RequestMapping(value = "/publisherss/{publishers}/dev_studios", name = "PublisherssItemDev_studiosThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private PublishersService PublisherssItemDev_studiosThymeleafController.publishersService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private DevStudioService PublisherssItemDev_studiosThymeleafController.devStudioService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource PublisherssItemDev_studiosThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<PublisherssCollectionThymeleafController> PublisherssItemDev_studiosThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService PublisherssItemDev_studiosThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param publishersService
     * @param devStudioService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public PublisherssItemDev_studiosThymeleafController.new(PublishersService publishersService, DevStudioService devStudioService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setPublishersService(publishersService);
        setDevStudioService(devStudioService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(PublisherssCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return PublishersService
     */
    public PublishersService PublisherssItemDev_studiosThymeleafController.getPublishersService() {
        return publishersService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishersService
     */
    public void PublisherssItemDev_studiosThymeleafController.setPublishersService(PublishersService publishersService) {
        this.publishersService = publishersService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return DevStudioService
     */
    public DevStudioService PublisherssItemDev_studiosThymeleafController.getDevStudioService() {
        return devStudioService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devStudioService
     */
    public void PublisherssItemDev_studiosThymeleafController.setDevStudioService(DevStudioService devStudioService) {
        this.devStudioService = devStudioService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource PublisherssItemDev_studiosThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void PublisherssItemDev_studiosThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<PublisherssCollectionThymeleafController> PublisherssItemDev_studiosThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void PublisherssItemDev_studiosThymeleafController.setCollectionLink(MethodLinkBuilderFactory<PublisherssCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService PublisherssItemDev_studiosThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void PublisherssItemDev_studiosThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Publishers
     */
    @ModelAttribute
    public Publishers PublisherssItemDev_studiosThymeleafController.getPublishers(@PathVariable("publishers") Long id, Locale locale, HttpMethod method) {
        Publishers publishers = null;
        if (HttpMethod.PUT.equals(method)) {
            publishers = publishersService.findOneForUpdate(id);
        } else {
            publishers = publishersService.findOne(id);
        }
        
        if (publishers == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Publishers", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return publishers;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void PublisherssItemDev_studiosThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void PublisherssItemDev_studiosThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<DevStudio>> PublisherssItemDev_studiosThymeleafController.datatables(@ModelAttribute Publishers publishers, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<DevStudio> dev_studios = getDevStudioService().findByPublishers(publishers, search, pageable);
        long totalDev_studiosCount = getDevStudioService().countByPublishers(publishers);
        ConvertedDatatablesData<DevStudio> data =  new ConvertedDatatablesData<DevStudio>(dev_studios, totalDev_studiosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<DevStudio>> PublisherssItemDev_studiosThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<DevStudio> dev_studios = getDevStudioService().findAllByIdsIn(ids, search, pageable);
        long totalDev_studiosCount = dev_studios.getTotalElements();
        ConvertedDatatablesData<DevStudio> data =  new ConvertedDatatablesData<DevStudio>(dev_studios, totalDev_studiosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView PublisherssItemDev_studiosThymeleafController.createForm(@ModelAttribute Publishers publishers, Model model) {
        populateForm(model);
        model.addAttribute("devStudio", new DevStudio());
        return new ModelAndView("publisherss/dev_studios/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param dev_studiosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromDev_studios", value = "/{dev_studiosToRemove}")
    @ResponseBody
    public ResponseEntity<?> PublisherssItemDev_studiosThymeleafController.removeFromDev_studios(@ModelAttribute Publishers publishers, @PathVariable("dev_studiosToRemove") Long dev_studiosToRemove) {
        getPublishersService().removeFromDev_studios(publishers,Collections.singleton(dev_studiosToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param dev_studiosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromDev_studiosBatch", value = "/batch/{dev_studiosToRemove}")
    @ResponseBody
    public ResponseEntity<?> PublisherssItemDev_studiosThymeleafController.removeFromDev_studiosBatch(@ModelAttribute Publishers publishers, @PathVariable("dev_studiosToRemove") Collection<Long> dev_studiosToRemove) {
        getPublishersService().removeFromDev_studios(publishers, dev_studiosToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publishers
     * @param dev_studios
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView PublisherssItemDev_studiosThymeleafController.create(@ModelAttribute Publishers publishers, @RequestParam(value = "dev_studiosIds", required = false) List<Long> dev_studios, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (dev_studios != null) {
            for (Iterator<Long> iterator = dev_studios.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, publishers.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (dev_studios != null) {
                publishers.setDev_studios(new HashSet<DevStudio>(getDevStudioService().findAll(dev_studios)));
            }else{
                publishers.setDev_studios(new HashSet<DevStudio>());
            }
            // Reset the version to prevent update
             publishers.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("publishers", publishers);
            model.addAttribute("concurrency", true);
            return new ModelAndView("publisherss/dev_studios/create");
        }else if(!Objects.equals(version, publishers.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("publishers", publishers);
            model.addAttribute("concurrency", false);
            return new ModelAndView("publisherss/dev_studios/create");
        }
        getPublishersService().setDev_studios(publishers,dev_studios);
        return new ModelAndView("redirect:" + getCollectionLink().to(PublisherssCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
