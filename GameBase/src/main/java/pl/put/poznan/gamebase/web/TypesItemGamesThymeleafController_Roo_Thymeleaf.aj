// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.web;

import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import pl.put.poznan.gamebase.service.api.GamesService;
import pl.put.poznan.gamebase.service.api.TypeService;
import pl.put.poznan.gamebase.structures.Games;
import pl.put.poznan.gamebase.structures.Type;
import pl.put.poznan.gamebase.web.TypesCollectionThymeleafController;
import pl.put.poznan.gamebase.web.TypesCollectionThymeleafLinkFactory;
import pl.put.poznan.gamebase.web.TypesItemGamesThymeleafController;

privileged aspect TypesItemGamesThymeleafController_Roo_Thymeleaf {
    
    declare @type: TypesItemGamesThymeleafController: @Controller;
    
    declare @type: TypesItemGamesThymeleafController: @RequestMapping(value = "/types/{type}/games", name = "TypesItemGamesThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TypeService TypesItemGamesThymeleafController.typeService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private GamesService TypesItemGamesThymeleafController.gamesService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource TypesItemGamesThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<TypesCollectionThymeleafController> TypesItemGamesThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService TypesItemGamesThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param typeService
     * @param gamesService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public TypesItemGamesThymeleafController.new(TypeService typeService, GamesService gamesService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setTypeService(typeService);
        setGamesService(gamesService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(TypesCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return TypeService
     */
    public TypeService TypesItemGamesThymeleafController.getTypeService() {
        return typeService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param typeService
     */
    public void TypesItemGamesThymeleafController.setTypeService(TypeService typeService) {
        this.typeService = typeService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return GamesService
     */
    public GamesService TypesItemGamesThymeleafController.getGamesService() {
        return gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gamesService
     */
    public void TypesItemGamesThymeleafController.setGamesService(GamesService gamesService) {
        this.gamesService = gamesService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource TypesItemGamesThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void TypesItemGamesThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<TypesCollectionThymeleafController> TypesItemGamesThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void TypesItemGamesThymeleafController.setCollectionLink(MethodLinkBuilderFactory<TypesCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService TypesItemGamesThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void TypesItemGamesThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Type
     */
    @ModelAttribute
    public Type TypesItemGamesThymeleafController.getType(@PathVariable("type") Long id, Locale locale, HttpMethod method) {
        Type type = null;
        if (HttpMethod.PUT.equals(method)) {
            type = typeService.findOneForUpdate(id);
        } else {
            type = typeService.findOne(id);
        }
        
        if (type == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Type", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return type;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void TypesItemGamesThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("rel_date_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void TypesItemGamesThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Games>> TypesItemGamesThymeleafController.datatables(@ModelAttribute Type type, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Games> games = getGamesService().findByType(type, search, pageable);
        long totalGamesCount = getGamesService().countByType(type);
        ConvertedDatatablesData<Games> data =  new ConvertedDatatablesData<Games>(games, totalGamesCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Games>> TypesItemGamesThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Games> games = getGamesService().findAllByIdsIn(ids, search, pageable);
        long totalGamesCount = games.getTotalElements();
        ConvertedDatatablesData<Games> data =  new ConvertedDatatablesData<Games>(games, totalGamesCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView TypesItemGamesThymeleafController.createForm(@ModelAttribute Type type, Model model) {
        populateForm(model);
        model.addAttribute("games", new Games());
        return new ModelAndView("types/games/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param gamesToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromGames", value = "/{gamesToRemove}")
    @ResponseBody
    public ResponseEntity<?> TypesItemGamesThymeleafController.removeFromGames(@ModelAttribute Type type, @PathVariable("gamesToRemove") Long gamesToRemove) {
        getTypeService().removeFromGames(type,Collections.singleton(gamesToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param gamesToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromGamesBatch", value = "/batch/{gamesToRemove}")
    @ResponseBody
    public ResponseEntity<?> TypesItemGamesThymeleafController.removeFromGamesBatch(@ModelAttribute Type type, @PathVariable("gamesToRemove") Collection<Long> gamesToRemove) {
        getTypeService().removeFromGames(type, gamesToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param type
     * @param games
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView TypesItemGamesThymeleafController.create(@ModelAttribute Type type, @RequestParam(value = "gamesIds", required = false) List<Long> games, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (games != null) {
            for (Iterator<Long> iterator = games.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, type.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (games != null) {
                type.setGames(new HashSet<Games>(getGamesService().findAll(games)));
            }else{
                type.setGames(new HashSet<Games>());
            }
            // Reset the version to prevent update
             type.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("type", type);
            model.addAttribute("concurrency", true);
            return new ModelAndView("types/games/create");
        }else if(!Objects.equals(version, type.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("type", type);
            model.addAttribute("concurrency", false);
            return new ModelAndView("types/games/create");
        }
        getTypeService().setGames(type,games);
        return new ModelAndView("redirect:" + getCollectionLink().to(TypesCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
