// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import pl.put.poznan.gamebase.repository.GameRepositoryImpl;
import pl.put.poznan.gamebase.structures.DevStudio;
import pl.put.poznan.gamebase.structures.Game;
import pl.put.poznan.gamebase.structures.GameType;
import pl.put.poznan.gamebase.structures.QGame;

privileged aspect GameRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: GameRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.PEGI = "pegi";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.REL___DATE = "rel_date";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.BUDGET = "budget";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.GAMETYPE = "gametype";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String GameRepositoryImpl.DEVSTUDIO = "devstudio";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Game> GameRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QGame game = QGame.game;
        
        JPQLQuery<Game> query = from(game);
        
        Path<?>[] paths = new Path<?>[] {game.title,game.description,game.pegi,game.rel_date,game.budget,game.gametype,game.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, game.title)
			.map(DESCRIPTION, game.description)
			.map(PEGI, game.pegi)
			.map(REL___DATE, game.rel_date)
			.map(BUDGET, game.budget)
			.map(GAMETYPE, game.gametype)
			.map(DEVSTUDIO, game.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, game);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Game> GameRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QGame game = QGame.game;
        
        JPQLQuery<Game> query = from(game);
        
        Path<?>[] paths = new Path<?>[] {game.title,game.description,game.pegi,game.rel_date,game.budget,game.gametype,game.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(game.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, game.title)
			.map(DESCRIPTION, game.description)
			.map(PEGI, game.pegi)
			.map(REL___DATE, game.rel_date)
			.map(BUDGET, game.budget)
			.map(GAMETYPE, game.gametype)
			.map(DEVSTUDIO, game.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, game);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devstudio
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Game> GameRepositoryImpl.findByDevstudio(DevStudio devstudio, GlobalSearch globalSearch, Pageable pageable) {
        
        QGame game = QGame.game;
        
        JPQLQuery<Game> query = from(game);
        
        Assert.notNull(devstudio, "devstudio is required");
        
        query.where(game.devstudio.eq(devstudio));
        Path<?>[] paths = new Path<?>[] {game.title,game.description,game.pegi,game.rel_date,game.budget,game.gametype,game.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, game.title)
			.map(DESCRIPTION, game.description)
			.map(PEGI, game.pegi)
			.map(REL___DATE, game.rel_date)
			.map(BUDGET, game.budget)
			.map(GAMETYPE, game.gametype)
			.map(DEVSTUDIO, game.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, game);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param gametype
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Game> GameRepositoryImpl.findByGametype(GameType gametype, GlobalSearch globalSearch, Pageable pageable) {
        
        QGame game = QGame.game;
        
        JPQLQuery<Game> query = from(game);
        
        Assert.notNull(gametype, "gametype is required");
        
        query.where(game.gametype.eq(gametype));
        Path<?>[] paths = new Path<?>[] {game.title,game.description,game.pegi,game.rel_date,game.budget,game.gametype,game.devstudio};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, game.title)
			.map(DESCRIPTION, game.description)
			.map(PEGI, game.pegi)
			.map(REL___DATE, game.rel_date)
			.map(BUDGET, game.budget)
			.map(GAMETYPE, game.gametype)
			.map(DEVSTUDIO, game.devstudio);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, game);
    }
    
}
