// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import pl.put.poznan.gamebase.repository.PlatformRepositoryImpl;
import pl.put.poznan.gamebase.structures.Platform;
import pl.put.poznan.gamebase.structures.QPlatform;

privileged aspect PlatformRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: PlatformRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PlatformRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PlatformRepositoryImpl.PRODUCENT = "producent";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PlatformRepositoryImpl.SALES = "sales";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PlatformRepositoryImpl.PREMIERE = "premiere";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Platform> PlatformRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QPlatform platform = QPlatform.platform;
        
        JPQLQuery<Platform> query = from(platform);
        
        Path<?>[] paths = new Path<?>[] {platform.name,platform.producent,platform.sales,platform.premiere};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, platform.name)
			.map(PRODUCENT, platform.producent)
			.map(SALES, platform.sales)
			.map(PREMIERE, platform.premiere);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, platform);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Platform> PlatformRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QPlatform platform = QPlatform.platform;
        
        JPQLQuery<Platform> query = from(platform);
        
        Path<?>[] paths = new Path<?>[] {platform.name,platform.producent,platform.sales,platform.premiere};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(platform.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, platform.name)
			.map(PRODUCENT, platform.producent)
			.map(SALES, platform.sales)
			.map(PREMIERE, platform.premiere);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, platform);
    }
    
}
