// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.put.poznan.gamebase.web;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import io.springlets.web.NotFoundException;
import java.io.IOException;
import org.springframework.boot.jackson.JsonComponent;
import org.springframework.core.convert.ConversionService;
import pl.put.poznan.gamebase.service.api.PublisherService;
import pl.put.poznan.gamebase.structures.Publisher;
import pl.put.poznan.gamebase.web.PublisherDeserializer;

privileged aspect PublisherDeserializer_Roo_EntityDeserializer {
    
    declare @type: PublisherDeserializer: @JsonComponent;
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return PublisherService
     */
    public PublisherService PublisherDeserializer.getPublisherService() {
        return publisherService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param publisherService
     */
    public void PublisherDeserializer.setPublisherService(PublisherService publisherService) {
        this.publisherService = publisherService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService PublisherDeserializer.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void PublisherDeserializer.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param jsonParser
     * @param context
     * @param codec
     * @param tree
     * @return Publisher
     * @throws IOException
     */
    public Publisher PublisherDeserializer.deserializeObject(JsonParser jsonParser, DeserializationContext context, ObjectCodec codec, JsonNode tree) throws IOException {
        String idText = tree.asText();
        Long id = conversionService.convert(idText, Long.class);
        Publisher publisher = publisherService.findOne(id);
        if (publisher == null) {
            throw new NotFoundException("Publisher not found");
        }
        return publisher;
    }
    
}
